module ALU (
    input  wire [31:0] A,        // First operand
    input  wire [31:0] B,        // Second operand
    input  wire [3:0]  ALU_Sel,  // Operation select
    output reg  [31:0] ALU_Out,  // ALU result
    output wire        Zero      // Zero flag
);

    assign Zero = (ALU_Out == 32'b0);  // Zero flag set when result is zero

    always @(*) begin
        case (ALU_Sel)
            4'b0000: ALU_Out = A + B;                     // ADD
            4'b0001: ALU_Out = A - B;                     // SUB
            4'b0010: ALU_Out = A & B;                     // AND
            4'b0011: ALU_Out = A | B;                     // OR
            4'b0100: ALU_Out = A ^ B;                     // XOR
            4'b0101: ALU_Out = A << 1;                    // Logical left shift
            4'b0110: ALU_Out = A >> 1;                    // Logical right shift
            4'b0111: ALU_Out = $signed(A) >>> 1;          // Arithmetic right shift
            4'b1000: ALU_Out = ($signed(A) < $signed(B)) ? 32'd1 : 32'd0; // SLT (signed)
            4'b1001: ALU_Out = (A < B) ? 32'd1 : 32'd0;   // SLTU (unsigned)
            4'b1111: ALU_Out = A;                         // NOP
            default: ALU_Out = 32'd0;
        endcase
    end

endmodule
